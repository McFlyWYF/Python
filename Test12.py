#正则表达式，它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。
'''
用\d可以匹配一个数字，\w可以匹配一个字母或数字
'00\d'可以匹配'007'，但无法匹配'00A'；
'\d\d\d'可以匹配'010'；
'\w\w\d'可以匹配'py3'；
.可以匹配任意字符，所以：
'py.'可以匹配'pyc'、'pyo'、'py!'等等。

要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），
用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，
用{n,m}表示n-m个字符：

例如：\d{3}\s+\d{3,8}
\d{3}表示匹配3个数字，例如'010'；
\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
\d{3,8}表示3-8个数字，例如'1234567'。
'''

#进阶
'''用[]表示范围，[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；

[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；

[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。

A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。

^表示行的开头，^\d表示必须以数字开头。

$表示行的结束，\d$表示必须以数字结束。

你可能注意到了，py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。
'''

#re模块
s = r'ABC\\-001'
#对应的正则表达式字符串变成 'ABC\-001'

import re
print (re.match(r'^\d{3}\-d{3,8}$','010-12345'))
re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
#match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。
test = '用户输入的字符串'
if re.match(r'正则表达式',test):
    print ('OK')
else:
    print ('failed')

#切分字符串
print (re.split(r'[\s\,\;]+','a,b,;;  c   d'))
#分组
m = re.match(r'^(\d{3,8})$','010-12345')
print (m)
print (m.group(0))#原始字符串
print (m.group(1))#第一个子串
print (m.group(2))#第二个子串

#贪婪匹配
import re
print (re.match(r'^(\d+)(0*)$', '102300').groups())